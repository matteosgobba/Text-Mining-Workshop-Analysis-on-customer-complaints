#0.Remove objects and load igraph ----------
rm(list=ls())
library(igraph)
#1.Diameter  ----------
help("diameter")                                                    #Explore this function
#1.Diameter  ----------
help("diameter")                                                    #Explore this function
g <- graph.formula(1-2, 1-3, 2-3, 3-4, 2-5, 3-5, 5-6, 5-7)          #Create a network
plot(g)                                                             #Display the network
d_g <- diameter(g, directed = FALSE, unconnected = FALSE)           #Diameter
#1.Diameter  ----------
help("diameter")                                                    #Explore this function
g <- graph.formula(1-2, 1-3, 2-3, 3-4, 2-5, 3-5, 5-6, 5-7)          #Create a network
plot(g)                                                             #Display the network
d_g <- diameter(g, directed = FALSE, unconnected = FALSE)           #Diameter
get_diameter(g)                                                     #Nodes on the diameter
#2.APL  ----------
help("mean_distance")                                               #Explore this function
#Connected network
g1 <- graph.formula(1-2, 1-3, 2-3, 3-4, 2-5, 3-5, 5-6, 5-7)         #Create a connected network
plot(g1)                                                            #Display the network
apl_g1  <- mean_distance(g1, directed = FALSE, unconnected = FALSE) #APL
dist_g1 <- distances(g1)                                            #Get the distance matrix
View(dist_g1)
#3.Density  ----------
help("edge_density")                                                #Explore this function
g <- graph.formula(1-2, 1-3, 2-3, 3-4, 2-5, 3-5, 5-6, 5-7)          #Create a network
plot(g)                                                             #Display the network
ed_g <- edge_density(g)                                             #Calculate density
#4.Components  ----------
help("components")                                                  #Explore this function
#Connected network
g1 <- graph.formula(1-2, 1-3, 2-3, 3-4, 2-5, 3-5, 5-6, 5-7)         #Create a connected network
plot(g1)                                                            #Display the network
comp_g1 <- components(g1)                                           #Calculate the number of components
View(comp_g1)
comp_g1                                                             #Components
size_my_comp <- comp_g1[[2]]
size_my_comp <- comp_g1$csize
size_my_comp <- comp_g1[[2]]
size_my_comp <- comp_g1$csize
#Unconnected network
g2 <- graph.formula(1-2, 1-3, 2-3, 3-4, 5-6, 5-7)                   #Create a unconnected network
plot(g2)                                                            #Display the network
is_connected(g2)                                                    #Testing whether a graph is connected
comp_g2 <- components(g2)                                           #Calculate the number of components
comp_g2                                                             #Components
size_my_comp <- max(comp_g2$csize)
#Extracting components (check option min.vertices = 0)
decompose(g2)
g2a <- decompose(g2)[[1]]
plot(g2a)
g2b <- decompose(g2)[[2]]
plot(g2b)
#Unconnected network
g2 <- graph.formula(1-2, 1-3, 2-3, 3-4, 5-6, 5-7)                   #Create a unconnected network
plot(g2)                                                            #Display the network
is_connected(g2)                                                    #Testing whether a graph is connected
comp_g2 <- components(g2)                                           #Calculate the number of components
comp_g2                                                             #Components
size_my_comp <- max(comp_g2$csize)
#Extracting components (check option min.vertices = 0)
decompose(g2)
g2a <- decompose(g2)[[1]]
plot(g2a)
g2b <- decompose(g2)[[2]]
plot(g2b)
#Important on Diameter and APL
diameter(g2, directed = FALSE, unconnected = TRUE)
diameter(g2a, directed = FALSE, unconnected = FALSE)
diameter(g2b, directed = FALSE, unconnected = FALSE)
mean_distance(g2, directed = FALSE, unconnected = TRUE)             #This is a simple average of non-infinite geodesic distance
mean_distance(g2a, directed = FALSE, unconnected = FALSE)
mean_distance(g2b, directed = FALSE, unconnected = FALSE)
#5.Cutpoints/Bridges  ----------
help("articulation_points")                                         #Explore this function
help("bridges")
g <- graph.formula(1-2, 1-3, 2-3, 3-4, 2-5, 3-5, 5-6, 5-7)          #Create a network
plot(g)                                                             #Display the network
cp_g <- articulation_points(g)                                      #Cutpoints
length(cp_g)
#6.Point/line connectivity  ----------
help("min_cut")                                                    #Explore this function
#9.Reachable pairs ----------
g <- graph.formula(1, 2-3, 4, 2-5, 3-5, 5-6, 7)                    #Create a unconnected network
plot(g)                                                            #Display the network
N <- vcount(g)
View(dist_g1)
observed_pairs_g <- (sum(!is.infinite(distances(g)))-N)/2          #Observed reachable pairs
#0.Remove objects and load igraph ----------
rm(list=ls())
library(tidyverse)
library(igraph)
#1.Degree  ----------
help("degree")                                                      #Explore this function
g <- graph.formula(1-2, 1-3, 2-3, 3-4, 2-5, 3-5,
5-6, 5-7, 7-8, 9-6, 1-10)                        #Create a network
plot(g)                                                             #Display the network
V(g)$degree <- degree(g)                                            #Degree (as anode attribute)
g                                                                   #Degree is no wan attribute of the network
V(g)$degree                                                         #Display the degree
V(g)$degree_n <- degree(g, normalized = T)                          #Normalised degree (as anode attribute)
g                                                                   #Normalised degree is now an attribute of the network
V(g)$degree_n                                                       #Display the normalised degree
V(g)$size <- 40
plot(g)
#0.Remove objects and load igraph ----------
rm(list=ls())
library(tidyverse)
library(igraph)
#1.Degree  ----------
help("degree")                                                      #Explore this function
g <- graph.formula(1-2, 1-3, 2-3, 3-4, 2-5, 3-5,
5-6, 5-7, 7-8, 9-6, 1-10)                        #Create a network
plot(g)                                                             #Display the network
V(g)$degree <- degree(g)                                            #Degree (as anode attribute)
degree(g)
g                                                                   #Degree is no wan attribute of the network
V(g)$degree                                                         #Display the degree
V(g)$degree_n <- degree(g, normalized = T)                          #Normalised degree (as anode attribute)
g                                                                   #Normalised degree is now an attribute of the network
V(g)$degree_n                                                       #Display the normalised degree
V(g)$size <- 40
plot(g)
g <- graph.formula(1-2, 1-3, 2-3, 3-4, 2-5, 3-5,
5-6, 5-7, 7-8, 9-6, 1-10)                        #Create a network
plot(g)                                                             #Display the network
V(g)$degree <- degree(g)                                            #Degree (as anode attribute)
g                                                                   #Degree is no wan attribute of the network
V(g)$degree                                                         #Display the degree
V(g)$degree_n <- degree(g, normalized = T)                          #Normalised degree (as anode attribute)
g                                                                   #Normalised degree is now an attribute of the network
V(g)$degree_n                                                       #Display the normalised degree
V(g)$degree_empmax <- degree(g)/max(degree)
V(g)$degree_empmax <- degree(g)/max(degree(g))
V(g)$size <- 40
plot(g)
V(g)$size <- V(g)$degree                                            #Degree in terms of size of nodes
plot(g)                                                             #Display the network
V(g)$size <- V(g)$degree*8                                          #Degree in terms of size of nodes * 10
plot(g)                                                             #Display the network
#2.Closeness  ----------
help("closeness")                                                   #Explore this function
V(g)$closeness <- closeness(g)                                      #Closeness (as anode attribute)
g                                                                   #Closeness is now an attribute of the network
V(g)$closeness                                                      #Display the closeness
V(g)$closeness_n <- closeness(g, normalized = TRUE)                 #Normalised closeness (as anode attribute)
g                                                                   #Normalised closeness is now an attribute of the network
V(g)$closeness_n                                                    #Display the normalised closeness
V(g)$size <- V(g)$closeness                                         #Closeness in terms of size of nodes
plot(g)                                                             #Display the network
V(g)$size <- V(g)$closeness*300                                     #Closeness in terms of size of nodes * 100
plot(g)                                                             #Display the network
#3.Betweenness  ----------
help("betweenness")                                                 #Explore this function
V(g)$betweenness <- betweenness(g)                                  #Betweenness (as anode attribute)
g                                                                   #Betweenness is now an attribute of the network
V(g)$betweenness                                                    #Display the betweenness
V(g)$betweenness_n <- betweenness(g, normalized = TRUE)             #Normalised betweenness (as anode attribute)
g                                                                   #Normalised betweenness is now an attribute of the network
V(g)$betweenness_n                                                  #Display the normalised betweenness
V(g)$size <- V(g)$betweenness                                       #Betweenness in terms of size of nodes
plot(g)                                                             #Display the network
V(g)$size <- (V(g)$betweenness+5)*2                                 #Betweenness in terms of size of nodes * 2
plot(g)                                                             #Display the network
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = my_data, aes(isocountrycode)) +
geom_histogram(stat = "count", color = "white",
fill = "blue", binwidth = 1, alpha = 0.4) +
ggtitle("Firms by country")
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = my_data, aes(isocountrycode)) +
geom_histogram(stat = "count", color = "white",
fill = "blue", binwidth = 1, alpha = 0.4) +
ggtitle("Firms by country")
install.packages("ggplot2")
rm(list=ls())
library(tidyverse)
library(GGally)
library(gghighlight)
library(patchwork)
my_data <- read_csv("scoreboard_firms_pharma_healthcare.csv")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(GGally)
library(gghighlight)
library(patchwork)
my_data <- read_csv("scoreboard_firms_pharma_healthcare.csv")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(GGally)
library(gghighlight)
library(patchwork)
my_data <- read_csv("scoreboard_firms_pharma_healthcare.csv")
rm(list=ls())
library(tidyverse)
library(GGally)
library(gghighlight)
library(patchwork)
my_data <- read_csv("scoreboard_firms_pharma_healthcare.csv")
View(my_data)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(GGally)
library(gghighlight)
library(patchwork)
my_data <- read_csv("scoreboard_firms_pharma_healthcare.csv")
# install.packages("devtools")
devtools::install_github("r-lib/conflicted")
force = TRUE
'force = TRUE'
install.packages("conflicted")
rm(list=ls())
library(tidyverse)
library(GGally)
library(gghighlight)
library(patchwork)
my_data <- read_csv("scoreboard_firms_pharma_healthcare.csv")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(GGally)
library(gghighlight)
library(patchwork)
my_data <- read_csv("scoreboard_firms_pharma_healthcare.csv")
install.packages(c("tidyverse", "GGally", "gghighlight", "patchwork"))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(GGally)
library(gghighlight)
library(patchwork)
my_data <- read_csv("scoreboard_firms_pharma_healthcare.csv")
ggplot(data = my_data, aes(isocountrycode)) +
geom_histogram(stat = "count", color = "white",
fill = "blue", binwidth = 1, alpha = 0.4) +
ggtitle("Firms by country")
ggplot(data = my_data, aes(rd2015)) +
geom_density(color = "white", fill = "blue", alpha = 0.4) +
ggtitle("Density plot of 2015 R&D investment")
ggplot(data = my_data, aes(rd2015)) +
geom_density(color = "white", fill = "blue", alpha = 0.4) +
scale_x_log10() +
ggtitle("Density plot of 2015 R&D investment") +
xlab("R&D investment 2015 (log scale)")
my_data_rd <- my_data %>%
select(ID, rd2011, rd2012, rd2013, rd2014, rd2015) %>%
pivot_longer(-ID, names_to = "year", values_to = "rd")
head(my_data_rd)
ggplot(data = my_data_rd, aes(rd)) +
geom_density(color = "white", fill = "blue", alpha = 0.4) +
scale_x_log10() +
ggtitle("Density plot of R&D investment (2011-2015)") +
xlab("R&D (log scale)")
head(my_data)
my_data_rd <- my_data %>%
select(ID, rd2011:rd2015) %>%
pivot_longer(-ID, names_to = "year", values_to = "rd") %>%
mutate(year = gsub("rd", "", year))
my_data_ns <- my_data %>%
select(ID, ns2011:ns2015) %>%
pivot_longer(-ID, names_to = "year", values_to = "ns") %>%
mutate(year = gsub("ns", "", year))
my_data_emp <- my_data %>%
select(ID, emp2011:emp2015) %>%
pivot_longer(-ID, names_to = "year", values_to = "emp") %>%
mutate(year = gsub("emp", "", year))
my_data_pub <- my_data %>%
select(ID, pubs.2011:pubs.2015) %>%
pivot_longer(-ID, names_to = "year", values_to = "pubs") %>%
mutate(year = gsub("pubs.", "", year))
my_data_tidy <- my_data_rd %>%
full_join(., my_data_ns, by = c("ID", "year")) %>%
full_join(., my_data_emp, by = c("ID", "year")) %>%
full_join(., my_data_pub, by = c("ID", "year")) %>%
full_join(., my_data %>% select(ID, isocountrycode), by = c("ID"))
head(my_data_tidy)
ggplot(data = my_data_rd, aes(rd, fill = year)) +
geom_density(color = "white", position = "identity", alpha = 0.4) +
scale_x_log10() +
ggtitle("Density plot of R&D investment (2011-2015)") +
xlab("R&D (log scale)")
ggpairs(my_data_tidy, aes(color = year),
columns = c("rd", "ns", "emp", "pubs"))
my_data_tidy <- my_data_tidy %>%
mutate(country = ifelse(isocountrycode != "US" &
isocountrycode != "CN" &
isocountrycode != "JP" &
isocountrycode != "DE" &
isocountrycode != "GB", "Other", isocountrycode))
ggplot(data = my_data_tidy, aes(x = rd, y = pubs+1)) +
geom_point(aes(color = country,  size = emp)) +
scale_size(range = c(0, 10)) +
geom_smooth() +
scale_x_log10() +
scale_y_log10() +
ggtitle("R&D investment and publications (2011-2015)") +
xlab("R&D (log scale)") +
ylab("Number of publications (log scale)") +
theme(legend.position = "bottom")
ggplot(data = my_data_tidy, aes(x = rd, y = pubs+1)) +
geom_point(aes(color = country,  size = emp)) +
scale_size(range = c(0, 10)) +
geom_smooth() +
scale_x_log10() +
scale_y_log10() +
ggtitle("R&D investment and publications (2011-2015) - <10,000 employees") +
xlab("R&D (log scale)") +
ylab("Number of publications") +
gghighlight(emp < 10000, keep_scales = T)
ggplot(data = my_data_tidy, aes(x = rd, y = pubs+1)) +
geom_point(aes(color = country,  size = emp)) +
scale_size(range = c(0, 10)) +
geom_smooth() +
scale_x_log10() +
scale_y_log10() +
ggtitle("R&D investment and publications (2011-2015) - 10,000-50,000 employees") +
xlab("R&D (log scale)") +
ylab("Number of publications") +
gghighlight(emp >= 10000 & emp <= 50000, keep_scales = T)
library(readr)
library(ggplot2)
library(tidyverse)
library(tidytext)
setwd("D:\\Documenti\\Università\\Business Data Analytics\\Workshop")
data <- read_csv("dataset.csv")
tokens <- read_csv("df_unigrams.csv")
tokens <- tokens %>%
mutate(word_numeric = as.numeric(word)) %>%
filter(is.na(word_numeric)) %>%
filter(!is.na(word))     # Ci sono osservazioni con NA, quindi le elimino
my_stop_words <- tibble(word = c("x","xx","xxx","xxxx","xxxxx","xxxxxx","xxxxxxx","xxxxxxxx", "xxxxxxxx"), lexicon = "mywords")
tokens <- tokens %>%
anti_join(my_stop_words)
tokens_count <- tokens %>%
count(word, sort = T)
View(tokens_count)
View(tokens)
tokens_count_cosine <- tokens %>%
count(id, word) %>%
cast_dtm(id, word, n)
library(tidyverse)
library(tidytext)
library(textdata)
library(plotly)
library(igraph)
library(ggraph)
tokens <- tokens %>%
select(`Complaint ID`, word) %>%
rename(Complaint_ID = `Complaint ID`)
tokens_count_cosine <- tokens %>%
count(Customer_ID, word) %>%
cast_dtm(Customer_ID, word, n)
View(tokens)
tokens_count_cosine <- tokens %>%
count(Complaint_ID, word) %>%
cast_dtm(Complaint_ID, word, n)
tokens_count_cosine
tokens_count_cosine <- tokens %>%
count(Complaint_ID, word) %>%
cast_dtm(Complaint_ID, word, n)
library(tidytext)
library(textdata)
library(plotly)
library(igraph)
library(ggraph)
tokens_count_cosine <- tokens %>%
count(Complaint_ID, word) %>%
cast_dtm(Complaint_ID, word, n)
install.packages("tm")
library(tm)
tokens_count_cosine <- tokens %>%
count(Complaint_ID, word) %>%
cast_dtm(Complaint_ID, word, n)
tokens_count_cosine
tokens_count_cosine <- lsa::cosine(as.matrix(tokens_count_cosine))
install.packages("lsa")
library(lsa)
tokens_count_cosine <- lsa::cosine(as.matrix(tokens_count_cosine))
tokens_count_cosine <- lsa::cosine(as.matrix(tokens_count_cosine))
View(tokens_count_cosine)
tokens_count_cosine <- lsa::cosine(as.matrix(tokens_count_cosine))
View(tokens)
